// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
	"net/netip"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id, granted_by)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, role_id) DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID    uuid.UUID `json:"user_id"`
	RoleID    uuid.UUID `json:"role_id"`
	GrantedBy uuid.UUID `json:"granted_by"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.RoleID, arg.GrantedBy)
	return err
}

const checkUserPermission = `-- name: CheckUserPermission :one
SELECT EXISTS (
    SELECT 1 FROM permissions p
                      INNER JOIN role_permissions rp ON rp.permission_id = p.id
                      INNER JOIN user_roles ur ON ur.role_id = rp.role_id
    WHERE ur.user_id = $1
      AND p.resource = $2
      AND p.action = $3
) AS has_permission
`

type CheckUserPermissionParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Resource string    `json:"resource"`
	Action   string    `json:"action"`
}

func (q *Queries) CheckUserPermission(ctx context.Context, arg CheckUserPermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserPermission, arg.UserID, arg.Resource, arg.Action)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const cleanupExpiredRefreshTokens = `-- name: CleanupExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < CURRENT_TIMESTAMP
   OR revoked_at < CURRENT_TIMESTAMP - INTERVAL '30 days'
`

func (q *Queries) CleanupExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredRefreshTokens)
	return err
}

const cleanupExpiredTokens = `-- name: CleanupExpiredTokens :exec

SELECT cleanup_expired_data()
`

// Cleanup and utility queries
func (q *Queries) CleanupExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredTokens)
	return err
}

const cleanupOldAuditLogs = `-- name: CleanupOldAuditLogs :exec
DELETE FROM audit_logs
WHERE created_at < $1
`

func (q *Queries) CleanupOldAuditLogs(ctx context.Context, createdAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, cleanupOldAuditLogs, createdAt)
	return err
}

const cleanupPasswordHistory = `-- name: CleanupPasswordHistory :exec
DELETE FROM password_history
WHERE password_history.user_id = $1
  AND password_history.id NOT IN (
    SELECT ph.id FROM password_history ph
    WHERE ph.user_id = $1
    ORDER BY ph.created_at DESC
    LIMIT $2
)
`

type CleanupPasswordHistoryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) CleanupPasswordHistory(ctx context.Context, arg CleanupPasswordHistoryParams) error {
	_, err := q.db.Exec(ctx, cleanupPasswordHistory, arg.UserID, arg.Limit)
	return err
}

const clearFailedLogins = `-- name: ClearFailedLogins :exec
DELETE FROM failed_login_attempts
WHERE user_id = $1
`

func (q *Queries) ClearFailedLogins(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearFailedLogins, userID)
	return err
}

const createAuditLog = `-- name: CreateAuditLog :one

INSERT INTO audit_logs (
    event_type,
    user_id,
    ip_address,
    user_agent,
    resource,
    action,
    success,
    error,
    metadata,
    created_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
         ) RETURNING id, event_type, user_id, ip_address, user_agent, resource, action, success, error, metadata, created_at
`

type CreateAuditLogParams struct {
	EventType string             `json:"event_type"`
	UserID    uuid.UUID          `json:"user_id"`
	IpAddress *netip.Addr        `json:"ip_address"`
	UserAgent *string            `json:"user_agent"`
	Resource  *string            `json:"resource"`
	Action    *string            `json:"action"`
	Success   bool               `json:"success"`
	Error     *string            `json:"error"`
	Metadata  []byte             `json:"metadata"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// Audit log queries
func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.EventType,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Resource,
		arg.Action,
		arg.Success,
		arg.Error,
		arg.Metadata,
		arg.CreatedAt,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Resource,
		&i.Action,
		&i.Success,
		&i.Error,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one

INSERT INTO email_verification_tokens (
    user_id,
    token_hash,
    expires_at
) VALUES (
             $1, $2, $3
         ) RETURNING id, user_id, token_hash, expires_at, created_at, used_at
`

type CreateEmailVerificationTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

// Email verification queries
func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const createPasswordHistory = `-- name: CreatePasswordHistory :one

INSERT INTO password_history (
    user_id,
    password_hash
) VALUES (
             $1, $2
         ) RETURNING id, user_id, password_hash, created_at
`

type CreatePasswordHistoryParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
}

// Password history queries
func (q *Queries) CreatePasswordHistory(ctx context.Context, arg CreatePasswordHistoryParams) (PasswordHistory, error) {
	row := q.db.QueryRow(ctx, createPasswordHistory, arg.UserID, arg.PasswordHash)
	var i PasswordHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one

INSERT INTO password_reset_tokens (
    user_id,
    token_hash,
    expires_at
) VALUES (
             $1, $2, $3
         ) RETURNING id, user_id, token_hash, expires_at, created_at, used_at
`

type CreatePasswordResetTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

// Password reset queries
func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, createPasswordResetToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one

INSERT INTO refresh_tokens (
    user_id,
    token_hash,
    expires_at,
    device_info
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, user_id, token_hash, expires_at, created_at, revoked_at, device_info
`

type CreateRefreshTokenParams struct {
	UserID     uuid.UUID `json:"user_id"`
	TokenHash  string    `json:"token_hash"`
	ExpiresAt  time.Time `json:"expires_at"`
	DeviceInfo []byte    `json:"device_info"`
}

// Refresh token queries
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.DeviceInfo,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.DeviceInfo,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at
`

type CreateRoleParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    email,
    username,
    password_hash
) VALUES (
             $1, $2, $3
         ) RETURNING id, email, username, password_hash, is_active, email_verified, locked_until, last_login_at, login_count, created_at, updated_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

// User management queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsActive,
		&i.EmailVerified,
		&i.LockedUntil,
		&i.LastLoginAt,
		&i.LoginCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSession = `-- name: CreateUserSession :one

INSERT INTO user_sessions (
    user_id,
    session_id,
    ip_address,
    user_agent,
    expires_at
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, user_id, session_id, ip_address, user_agent, created_at, last_accessed_at, expires_at
`

type CreateUserSessionParams struct {
	UserID    uuid.UUID   `json:"user_id"`
	SessionID string      `json:"session_id"`
	IpAddress *netip.Addr `json:"ip_address"`
	UserAgent *string     `json:"user_agent"`
	ExpiresAt time.Time   `json:"expires_at"`
}

// User session queries
func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession,
		arg.UserID,
		arg.SessionID,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.LastAccessedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active = false
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getActiveSessions = `-- name: GetActiveSessions :many
SELECT id, user_id, session_id, ip_address, user_agent, created_at, last_accessed_at, expires_at FROM user_sessions
WHERE user_id = $1 AND expires_at > CURRENT_TIMESTAMP
ORDER BY last_accessed_at DESC
`

func (q *Queries) GetActiveSessions(ctx context.Context, userID uuid.UUID) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, getActiveSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionID,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.LastAccessedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogs = `-- name: GetAuditLogs :many
SELECT id, event_type, user_id, ip_address, user_agent, resource, action, success, error, metadata, created_at FROM audit_logs
WHERE ($1::uuid IS NULL OR user_id = $1)
  AND ($2::text IS NULL OR event_type = $2)
  AND ($3::timestamptz IS NULL OR created_at >= $3)
  AND ($4::timestamptz IS NULL OR created_at <= $4)
ORDER BY created_at DESC
LIMIT $5 OFFSET $6
`

type GetAuditLogsParams struct {
	Column1 uuid.UUID `json:"column_1"`
	Column2 string    `json:"column_2"`
	Column3 time.Time `json:"column_3"`
	Column4 time.Time `json:"column_4"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) GetAuditLogs(ctx context.Context, arg GetAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogs,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Resource,
			&i.Action,
			&i.Success,
			&i.Error,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT id, user_id, token_hash, expires_at, created_at, used_at FROM email_verification_tokens
WHERE token_hash = $1
  AND expires_at > CURRENT_TIMESTAMP
  AND used_at IS NULL
LIMIT 1
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, tokenHash string) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationToken, tokenHash)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getFailedLoginCount = `-- name: GetFailedLoginCount :one
SELECT COUNT(*) FROM failed_login_attempts
WHERE user_id = $1 AND attempted_at > $2
`

type GetFailedLoginCountParams struct {
	UserID      uuid.UUID          `json:"user_id"`
	AttemptedAt pgtype.Timestamptz `json:"attempted_at"`
}

func (q *Queries) GetFailedLoginCount(ctx context.Context, arg GetFailedLoginCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getFailedLoginCount, arg.UserID, arg.AttemptedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPasswordHistory = `-- name: GetPasswordHistory :many
SELECT id, user_id, password_hash, created_at FROM password_history
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetPasswordHistoryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetPasswordHistory(ctx context.Context, arg GetPasswordHistoryParams) ([]PasswordHistory, error) {
	rows, err := q.db.Query(ctx, getPasswordHistory, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PasswordHistory{}
	for rows.Next() {
		var i PasswordHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, user_id, token_hash, expires_at, created_at, used_at FROM password_reset_tokens
WHERE token_hash = $1
  AND expires_at > CURRENT_TIMESTAMP
  AND used_at IS NULL
LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, tokenHash string) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetToken, tokenHash)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getPermissionsByRoleId = `-- name: GetPermissionsByRoleId :many
SELECT p.id, p.name, p.resource, p.action, p.description, p.created_at FROM permissions p
                    INNER JOIN role_permissions rp ON rp.permission_id = p.id
WHERE rp.role_id = $1
`

func (q *Queries) GetPermissionsByRoleId(ctx context.Context, roleID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Action,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentFailedLogins = `-- name: GetRecentFailedLogins :many
SELECT id, user_id, ip_address, user_agent, attempted_at FROM failed_login_attempts
WHERE user_id = $1 AND attempted_at > $2
ORDER BY attempted_at DESC
`

type GetRecentFailedLoginsParams struct {
	UserID      uuid.UUID          `json:"user_id"`
	AttemptedAt pgtype.Timestamptz `json:"attempted_at"`
}

func (q *Queries) GetRecentFailedLogins(ctx context.Context, arg GetRecentFailedLoginsParams) ([]FailedLoginAttempt, error) {
	rows, err := q.db.Query(ctx, getRecentFailedLogins, arg.UserID, arg.AttemptedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FailedLoginAttempt{}
	for rows.Next() {
		var i FailedLoginAttempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.AttemptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token_hash, expires_at, created_at, revoked_at, device_info FROM refresh_tokens
WHERE token_hash = $1
  AND expires_at > CURRENT_TIMESTAMP
  AND revoked_at IS NULL
LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.DeviceInfo,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, created_at FROM roles
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getSecurityStats = `-- name: GetSecurityStats :one
SELECT
    (SELECT COUNT(*) FROM users WHERE is_active = true) as active_users,
    (SELECT COUNT(*) FROM users WHERE locked_until > CURRENT_TIMESTAMP) as locked_users,
    (SELECT COUNT(*) FROM failed_login_attempts WHERE attempted_at > CURRENT_TIMESTAMP - INTERVAL '24 hours') as failed_logins_24h,
    (SELECT COUNT(*) FROM audit_logs WHERE success = false AND created_at > CURRENT_TIMESTAMP - INTERVAL '24 hours') as security_events_24h,
    (SELECT COUNT(*) FROM user_sessions WHERE expires_at > CURRENT_TIMESTAMP) as active_sessions
`

type GetSecurityStatsRow struct {
	ActiveUsers       int64 `json:"active_users"`
	LockedUsers       int64 `json:"locked_users"`
	FailedLogins24h   int64 `json:"failed_logins_24h"`
	SecurityEvents24h int64 `json:"security_events_24h"`
	ActiveSessions    int64 `json:"active_sessions"`
}

func (q *Queries) GetSecurityStats(ctx context.Context) (GetSecurityStatsRow, error) {
	row := q.db.QueryRow(ctx, getSecurityStats)
	var i GetSecurityStatsRow
	err := row.Scan(
		&i.ActiveUsers,
		&i.LockedUsers,
		&i.FailedLogins24h,
		&i.SecurityEvents24h,
		&i.ActiveSessions,
	)
	return i, err
}

const getUserAuditLogs = `-- name: GetUserAuditLogs :many
SELECT id, event_type, user_id, ip_address, user_agent, resource, action, success, error, metadata, created_at FROM audit_logs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserAuditLogsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetUserAuditLogs(ctx context.Context, arg GetUserAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getUserAuditLogs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Resource,
			&i.Action,
			&i.Success,
			&i.Error,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password_hash, is_active, email_verified, locked_until, last_login_at, login_count, created_at, updated_at FROM users
WHERE email = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsActive,
		&i.EmailVerified,
		&i.LockedUntil,
		&i.LastLoginAt,
		&i.LoginCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, password_hash, is_active, email_verified, locked_until, last_login_at, login_count, created_at, updated_at FROM users
WHERE id = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsActive,
		&i.EmailVerified,
		&i.LockedUntil,
		&i.LastLoginAt,
		&i.LoginCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password_hash, is_active, email_verified, locked_until, last_login_at, login_count, created_at, updated_at FROM users
WHERE username = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsActive,
		&i.EmailVerified,
		&i.LockedUntil,
		&i.LastLoginAt,
		&i.LoginCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT DISTINCT p.id, p.name, p.resource, p.action, p.description, p.created_at FROM permissions p
                             INNER JOIN role_permissions rp ON rp.permission_id = p.id
                             INNER JOIN user_roles ur ON ur.role_id = rp.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetUserPermissions(ctx context.Context, userID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Action,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many

SELECT r.id, r.name, r.description, r.created_at FROM roles r
                    INNER JOIN user_roles ur ON ur.role_id = r.id
WHERE ur.user_id = $1
`

// Role and permission queries
func (q *Queries) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSession = `-- name: GetUserSession :one
SELECT id, user_id, session_id, ip_address, user_agent, created_at, last_accessed_at, expires_at FROM user_sessions
WHERE session_id = $1
  AND expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetUserSession(ctx context.Context, sessionID string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSession, sessionID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.LastAccessedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const invalidateAllUserSessions = `-- name: InvalidateAllUserSessions :exec
DELETE FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) InvalidateAllUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, invalidateAllUserSessions, userID)
	return err
}

const invalidateUserPasswordResetTokens = `-- name: InvalidateUserPasswordResetTokens :exec
UPDATE password_reset_tokens
SET used_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND used_at IS NULL
`

func (q *Queries) InvalidateUserPasswordResetTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, invalidateUserPasswordResetTokens, userID)
	return err
}

const invalidateUserSession = `-- name: InvalidateUserSession :exec
DELETE FROM user_sessions
WHERE session_id = $1
`

func (q *Queries) InvalidateUserSession(ctx context.Context, sessionID string) error {
	_, err := q.db.Exec(ctx, invalidateUserSession, sessionID)
	return err
}

const lockUserAccount = `-- name: LockUserAccount :exec
UPDATE users
SET locked_until = $2
WHERE id = $1
`

type LockUserAccountParams struct {
	ID          uuid.UUID          `json:"id"`
	LockedUntil pgtype.Timestamptz `json:"locked_until"`
}

func (q *Queries) LockUserAccount(ctx context.Context, arg LockUserAccountParams) error {
	_, err := q.db.Exec(ctx, lockUserAccount, arg.ID, arg.LockedUntil)
	return err
}

const markEmailVerified = `-- name: MarkEmailVerified :exec
UPDATE users
SET email_verified = true
WHERE id = $1
`

func (q *Queries) MarkEmailVerified(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, markEmailVerified, id)
	return err
}

const recordFailedLogin = `-- name: RecordFailedLogin :one

INSERT INTO failed_login_attempts (
    user_id,
    ip_address,
    user_agent
) VALUES (
             $1, $2, $3
         ) RETURNING id, user_id, ip_address, user_agent, attempted_at
`

type RecordFailedLoginParams struct {
	UserID    uuid.UUID  `json:"user_id"`
	IpAddress netip.Addr `json:"ip_address"`
	UserAgent *string    `json:"user_agent"`
}

// Failed login attempt queries
func (q *Queries) RecordFailedLogin(ctx context.Context, arg RecordFailedLoginParams) (FailedLoginAttempt, error) {
	row := q.db.QueryRow(ctx, recordFailedLogin, arg.UserID, arg.IpAddress, arg.UserAgent)
	var i FailedLoginAttempt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.AttemptedAt,
	)
	return i, err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE refresh_tokens
SET revoked_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND revoked_at IS NULL
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = CURRENT_TIMESTAMP
WHERE token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, tokenHash)
	return err
}

const unlockUserAccount = `-- name: UnlockUserAccount :exec
UPDATE users
SET locked_until = NULL
WHERE id = $1
`

func (q *Queries) UnlockUserAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, unlockUserAccount, id)
	return err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET
    last_login_at = CURRENT_TIMESTAMP,
    login_count = login_count + 1
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateSessionAccess = `-- name: UpdateSessionAccess :exec
UPDATE user_sessions
SET last_accessed_at = CURRENT_TIMESTAMP
WHERE session_id = $1
`

func (q *Queries) UpdateSessionAccess(ctx context.Context, sessionID string) error {
	_, err := q.db.Exec(ctx, updateSessionAccess, sessionID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($2, email),
    username = COALESCE($3, username),
    password_hash = COALESCE($4, password_hash),
    is_active = COALESCE($5, is_active),
    email_verified = COALESCE($6, email_verified),
    locked_until = COALESCE($7, locked_until),
    last_login_at = COALESCE($8, last_login_at),
    login_count = COALESCE($9, login_count)
WHERE id = $1
RETURNING id, email, username, password_hash, is_active, email_verified, locked_until, last_login_at, login_count, created_at, updated_at
`

type UpdateUserParams struct {
	ID            uuid.UUID          `json:"id"`
	Email         string             `json:"email"`
	Username      string             `json:"username"`
	PasswordHash  string             `json:"password_hash"`
	IsActive      *bool              `json:"is_active"`
	EmailVerified *bool              `json:"email_verified"`
	LockedUntil   pgtype.Timestamptz `json:"locked_until"`
	LastLoginAt   pgtype.Timestamptz `json:"last_login_at"`
	LoginCount    *int32             `json:"login_count"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.IsActive,
		arg.EmailVerified,
		arg.LockedUntil,
		arg.LastLoginAt,
		arg.LoginCount,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.IsActive,
		&i.EmailVerified,
		&i.LockedUntil,
		&i.LastLoginAt,
		&i.LoginCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const useEmailVerificationToken = `-- name: UseEmailVerificationToken :exec
UPDATE email_verification_tokens
SET used_at = CURRENT_TIMESTAMP
WHERE token_hash = $1
`

func (q *Queries) UseEmailVerificationToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, useEmailVerificationToken, tokenHash)
	return err
}

const usePasswordResetToken = `-- name: UsePasswordResetToken :exec
UPDATE password_reset_tokens
SET used_at = CURRENT_TIMESTAMP
WHERE token_hash = $1
`

func (q *Queries) UsePasswordResetToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, usePasswordResetToken, tokenHash)
	return err
}
